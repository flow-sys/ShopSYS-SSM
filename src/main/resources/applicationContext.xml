<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 申明数据源DataSource，作用是连接数据库 -->
    <bean id="MydataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- set注入给DruidDataSource提供连接数据库的信息 -->
        <!-- 使用属性配置中的数据，语法 -->
        <property name="url" value="${jdbc.url}"/> <!-- setUrl() -->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

    <!-- 声明的是mybatis中提供的SqlSessionFactoryBean类，这个类是内部创建SqlSessionFactory的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- set注入，把数据库连接池赋予datasource属性 -->
        <property name="dataSource" ref="MydataSource"/>
        <!--
            mybatis主配置文件的位置
            configLocation属性是Resource类型，读取配置文件
            它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置
         -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!--
        创建dao对象，使用SqlSession的getMapper（StudentDao.class)
        MapperScannerConfigurer:在内部掉用getMapper()生成每个dao接口的代理对象
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定SqlSessionFactory对象的id -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--
            指定包名，包名是dao接口所在的包名。
            MapperScannerConfigurer会扫描这个包中的所有接口，
            把每个接口都执行一次getMapper()方法，得到每个接口的dao对象。
            创建号的dao对象放入到spring的容器中的。
         -->
        <property name="basePackage" value="com.ourfinal.Repository"/>
    </bean>

    <!-- 使用spring的事物处理 -->
    <!-- 声明事物管理器 -->
    <bean id="transactionManage"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="MydataSource"/>
    </bean>

    <!-- 
         开启事物注解驱动，告诉spring使用注解管理事物，创建代理对象
         transaction-manager:事务管理对象的id
    -->
    <tx:annotation-driven transaction-manager="transactionManage"/>

    <!-- 声明service -->
    <context:component-scan base-package="com.ourfinal.Service"/>
</beans>